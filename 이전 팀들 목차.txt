1.도서인식
	목차
		- 기획 의도
		- 개발 환경
		- 수행 과정 및 일정
		- 역할 분담
		- 구현 기능 
		- 시연

	기타
		- 절반은 코드 절반은 그 결과에 대한 이미지를 통해 설명
		- API : OpenCV, roboflow, Streamlit, PyTorch, TensorFlow
		- Craft Text Detector : 배치 정규화와 함께 VTC 완성 컴볼루션 아키텍쳐? : 픽셀 단위로 문자를 인코딩함
		- 

		

2.처방전 및 알약
	목차
		- 팀소개
		- 프로젝트 개요
		- 프로젝트 수행 결과

	기타
		- 절반은 코드 절반은 그 결과에 대한 이미지를 통해 설명
		- Google Cloud Vision API
		- 외곽선 검출, 컨투어 찾기, threshold 사용하려다 말고 투시변환 적용(기울기문제), 웹 캠을 이용한 처방전 자동 인식(Tesseract OCR)


3. 악보가사인식
	목차
		- 프로젝트 개요
		- 프로젝트 팀 구성 및 역할
		- 프로젝트 수행 절차 및 방법
		- 프로젝트 시연
		- 프로젝트 소감

	기타
		- ⚠️OpenCV는 API이다(잘못 표기됨)
		- Google Vision API
		- Clova
		- DropZone : jquery dropzone.js 를 이용하여 dropzone 구현
		- 특히 "파일을 업로드해주세요."와 같은 문구로 사용자에게 사용하는 방법을 쉽게 유도함
		- 내 생각에는 저 파일을 업로드해주세요 공간을 클릭해도 불러올 수 있도록 만들면 좋을 듯 함
		- 인식을 위해 내가 원하는 인식하는 것과 그 외의 글자의 차이점이 어떤 것인지 잘 설명하여 해결하기위해 어떠한 방식을 사용했는지 잘 설명함
		-  아티스트 확인에서 한글 인식에 문제가 있어 Google api를 사용함
		- 인식하기 쉬운 것을 먼저 잡고 그 하단에 있는 구간을 인식 구간으로 만들어 가사를 인식하여 추출하도록 만듬
		- 한글 인식에 문제가 있어서 Google Vision API를 사용하는데 이미지를 url로 전달한다고 함 근데 파일의 데이터가 너무 커서 ByTeIO를 사용하여 이미지를 데이터를 url데이터로 변형시켜 전달함(용량 문제 해결)
		- 어떤 이미지를 인식했고 그 이미지의 어느 부분을 어떤 모습으로 인식했는지를 웹에 띄워줌 
		- 악보를 읽어서 재생...
		- 악보외에 다른 이미지를 입력 시 경고 창을 띄워줌
		- 멜론 재생을 이용(채도 차이를 이용한 인식률 상승)
		- 멜론 앱과의 연동ㄷㄷ(지렸다) 앱에서 어떻게 킨 거지...흠 잘했다.
		- 마지막에 앱 화면으로 PPT를 띄웠는데 알람뜨는 거 조심해야 할 것 같다.
		- ㅁ

4.공문서 OCR인식
	목차
		- 프로젝트 개요
		- 프로젝트 시연
		- 프로젝트 수행과정
	기타
		- 인식률을 높이기 위해 잡음과 반사광 제거 과정을 거침
		- 갓준영!갓준영!갓준영!갓준영!
		- 모델 공부 엄청하심(VGG10, VGG16, ResNet152, SE-ResNer50)
		


개인 생각
	- 이미지의 어디를 어떤차이를 이용하여 어떻게 인식했는지를 설명하는 것이 이번 발표에서 중요한것 같다.

